const express = require('express')
const router = express.Router()
const MsgController = require('../Controllers/MsgController')
const RateLimiter = require('../Middleware/RateLimitMiddleware')
const { verifyToken, onlyUserActive, onlyOwnerOrAdminMsg, onlyAdmin } = require('../Middleware/AuthMiddleware')
const { validaDatos, validarId, validarTexto, validarTextoLargo } = require('../Helper/validaciones')

router.use(RateLimiter(1000, 4))
router.get('/', MsgController.GetAllMsg)
router.use(verifyToken)
router.get('/:_id', validarId(), validaDatos, MsgController.GetMsg)
router.use(onlyUserActive)
router.post('/', validarTexto('subject'), validarTextoLargo('msg'), validaDatos, MsgController.CreateMsg)
router.patch('/:_id', validarId(), validaDatos, onlyOwnerOrAdminMsg, MsgController.UpdateMsg)
router.delete('/:_id', validarId(), validaDatos, onlyOwnerOrAdminMsg, MsgController.DeleteMsg)
router.post('/like/:_id', validarId(), validaDatos, MsgController.AddLike)
router.delete('/like/:_id', validarId(), validaDatos, MsgController.RemoveLike)
router.post('/comment/:_id', validarId(), validarTextoLargo('msg'), validaDatos, MsgController.AddComment)
router.delete('/comment/:_id', validarId(), validaDatos, MsgController.RemoveComment)
router.post('/toggleLikeInComment', validaDatos, MsgController.ToggleLikeInAComment)
router.post('/subComment/:_id', validarId(), validarTextoLargo('msg'), validaDatos, MsgController.AddSubComment)
router.delete('/subComment/:_id', validarId(), validaDatos, MsgController.RemoveSubComment)
router.post('/toggleLikeInSubComment', validaDatos, MsgController.ToggleLikeInASubComment)
router.post('/incrementViews/:_id', validarId(), MsgController.IncrementViews)
router.post('/getDashboardData', MsgController.GetDashboardData)
router.post('/markDirectAsView/:friendId', validarId(), MsgController.MarkDirectMsgAsViewed)
router.post('/createNew', validarTextoLargo('msg'), validaDatos, MsgController.CreateMsg)
router.post('/toggleValidateNew/:_id', validarId(), onlyAdmin, MsgController.ToggleValidateArticle)
router.post('/toggleValidateNotification/:_id', validarId(), onlyAdmin, MsgController.ToggleValidateNotification)
router.post('/markNotificationAsView/:_id', validarId(), MsgController.MarkNotificationMsgAsViewed)

module.exports = router


